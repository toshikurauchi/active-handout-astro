---
import { setupExercise } from "../server-telemetry";
import MultipleChoiceExercise, {
  exerciseType,
  type ColumnCount,
  type LetterPosition,
} from "./ReactComponent/MultipleChoice";
import type { ExerciseContainerProps } from "../props";
import { rehypeExtractOptions } from "./rehype-extract-options";
import config from "virtual:active-handout/user-config";

const handoutPath = Astro.url.pathname;

interface Props extends ExerciseContainerProps {
  columns?: ColumnCount;
  letterPosition?: LetterPosition;
}

const baseHTML = await Astro.slots.render("default");
const { options, htmlBefore, htmlAfter } = rehypeExtractOptions(baseHTML);

let { columns, letterPosition } = Astro.props;
if (!columns) columns = 1;
if (typeof letterPosition === "undefined") letterPosition = "left";

const [exerciseNumber, latestSubmission, slug] = await setupExercise(
  Astro.props,
  Astro.locals,
  handoutPath,
  exerciseType,
  ["multiple-choice-exercise"],
  { options }
);

const registryKey = `exercise-registry/multiple-choice-exercise/${handoutPath}/${slug}`;
---

<MultipleChoiceExercise
  handoutPath={handoutPath}
  slug={slug}
  exerciseNumber={exerciseNumber}
  latestSubmission={latestSubmission}
  registryKey={registryKey}
  htmlBefore={htmlBefore}
  htmlAfter={htmlAfter}
  options={options}
  columns={columns}
  letterPosition={letterPosition}
  client:visible
/>

{
  (!config.auth || !config.telemetry) && (
    <script define:vars={{ handoutPath, slug, options, registryKey }}>
    localStorage.setItem(registryKey, JSON.stringify(options));
    </script>
  )
}
