---
import { buildExerciseContainerProps } from "../server-telemetry";
import MultipleChoiceExercise, {
  exerciseType,
} from "./ReactComponent/MultipleChoice";
import type { ExerciseContainerProps } from "../props";
import { rehypeExtractOptions } from "./rehype-extract-options";
import type { ColumnCount, LetterPosition } from "./ReactComponent/props";

const handoutPath = Astro.url.pathname;

interface Props extends ExerciseContainerProps {
  columns?: ColumnCount;
  letterPosition?: LetterPosition;
}

let { columns, letterPosition } = Astro.props;
if (!columns) columns = 1;
if (typeof letterPosition === "undefined") letterPosition = "left";

const props = await buildExerciseContainerProps(
  await Astro.slots.render("default"),
  Astro.props,
  Astro.locals,
  handoutPath,
  exerciseType,
  ["multiple-choice-exercise"],
  (baseHTML: string) => {
    const { options, htmlBefore, htmlAfter } = rehypeExtractOptions(baseHTML);
    const cleanOptions = options.map((option) => option.htmlContent);
    return {
      data: { options },
      extraProps: { options: cleanOptions, htmlBefore, htmlAfter },
      newHTML: "",
    };
  }
);
---

<MultipleChoiceExercise
  {...props}
  columns={columns}
  letterPosition={letterPosition}
  client:visible
/>
