---
import { ExerciseContainerProps } from "../props";
import { buildExerciseContainerProps } from "../server-telemetry";
import ParsonsExercise from "./ReactComponent/ParsonsExercise";
import { rehypeExtractParsonsLines } from "./rehype-extract-parsons-lines";
import { INDENTATION } from "./indentation";
import type { ParsonsLineData } from "./ReactComponent/parsons-types";

interface Props extends ExerciseContainerProps {
  withIndentation?: boolean;
  maxIndentation?: number;
  singleColumn?: boolean;
}

const handoutPath = Astro.url.pathname;
const exerciseType = "parsons-problem";

const { withIndentation, singleColumn, maxIndentation } = Astro.props;

const props = await buildExerciseContainerProps(
  await Astro.slots.render("default"),
  Astro.props,
  Astro.locals,
  handoutPath,
  exerciseType,
  ["parsons-problem"],
  (baseHTML: string) => {
    const { lines, htmlBefore, htmlAfter } =
      rehypeExtractParsonsLines(baseHTML);
    return {
      data: {
        expected: lines
          .filter((line) => !line.distractor)
          .map(
            ({ indent, plainContent }) =>
              INDENTATION.repeat(indent) + plainContent
          )
          .join("\n"),
      },
      extraProps: {
        lines: lines.map(
          ({ htmlContent, plainContent }) =>
            ({
              htmlContent,
              plainContent,
              indent: 0,
            }) as ParsonsLineData
        ),
        htmlBefore,
        htmlAfter,
      },
      newHTML: "",
    };
  }
);
---

<div class="parsons-exercise-container">
  <ParsonsExercise
    withIndentation={!!withIndentation}
    singleColumn={!!singleColumn}
    maxIndentation={maxIndentation || 5}
    {...props}
    client:only
  />
</div>
