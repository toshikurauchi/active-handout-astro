---
import type { MarkdownHeading } from "astro";
import { hasCurrent, type NavTreeItem } from "../../utils/routing";
import { pathWithBase } from "../../utils/base";

interface Props {
  entries: NavTreeItem[];
  headings?: MarkdownHeading[] | undefined;
  nested?: boolean;
}

const { entries, nested, headings } = Astro.props;
---

<ul class:list={{ "top-level": !nested }}>
  {
    entries.map((entry) => (
      <li>
        {!entry.children && (
          <summary>
            <span
              class:list={[
                "item-summary",
                "no-children",
                entry.isCurrent ? "current" : "",
                entry.isCurrent && headings && headings.length > 0
                  ? "with-headings"
                  : "",
              ]}
            >
              <a href={pathWithBase(entry.url || "")}>{entry.title}</a>
            </span>
            {entry.isCurrent && headings && headings.length > 0 && (
              <ul class="headings">
                {headings.map((heading) => (
                  <li class={`heading-${heading.depth}`}>
                    <a href={`#${heading.slug}`}>{heading.text}</a>
                  </li>
                ))}
              </ul>
            )}
          </summary>
        )}
        {entry.children && (
          <details open={hasCurrent(entry)}>
            <summary>
              <span
                class:list={["item-summary", entry.isCurrent ? "current" : ""]}
              >
                <a href={pathWithBase(entry.url || "")}>{entry.title}</a>
              </span>
            </summary>
            <Astro.self
              entries={entry.children}
              nested={true}
              headings={headings}
            />
          </details>
        )}
      </li>
    ))
  }
</ul>

<style lang="scss">
  summary {
    list-style: none;

    &::marker,
    &::-webkit-details-marker {
      display: none;
    }

    .item-summary {
      display: grid;
      grid-template-columns: auto min-content;
      align-items: center;
      border-radius: 0.5em;
      padding: 0.2em 1rem;

      &::after {
        content: "â–¸";
        display: grid;
        place-items: center;
        color: var(--clr-text);
        transition: transform 0.1s ease-in-out;
        transform-origin: center center;
        cursor: pointer;
      }

      &.no-children {
        &::after {
          color: transparent;
        }
      }

      &.current {
        font-weight: bold;
        background-color: var(--clr-secondary);
        padding-block: 0.5em;

        &.with-headings {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
        }
      }
    }
  }

  details {
    &[open] > summary > .item-summary::after {
      transform: rotate(90deg);
    }
  }

  ul {
    list-style: none;
    margin: 0 0 0.5rem;
    padding: 0 0 0 1rem;
    height: 100%;

    &.top-level {
      overflow-y: auto;
    }

    &.headings {
      list-style: none;
      background-color: #ddd6;
      padding: 0.5rem 1rem;
      margin-left: 0;
      border-radius: 0 0 0.5em 0.5em;

      li {
        display: list-item;
        line-height: 1.1;
        margin-bottom: 1em;

        &::marker {
          color: var(--clr-text-light);
        }

        &:hover {
          transform: scale(1.01);
        }
      }

      a {
        padding: 0;
      }
    }
  }

  li {
    display: flex;
    flex-direction: column;
  }

  a {
    text-decoration: none;
    line-height: 1.1;

    &:hover {
      transform: scale(1.02);
    }
  }

  @for $i from 1 through 6 {
    .heading-#{$i} {
      margin-left: calc(1em * #{max($i - 2, 0)});
    }
  }
</style>
