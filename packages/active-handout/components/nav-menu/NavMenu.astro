---
import type { MarkdownHeading } from "astro";
import { hasCurrent, type NavTreeItem } from "../../utils/routing";
import { pathWithBase } from "../../utils/base";

interface Props {
  entries: NavTreeItem[];
  headings?: MarkdownHeading[] | undefined;
  nested?: boolean;
}

const { entries, nested, headings } = Astro.props;
---

<ul class:list={{ "top-level": !nested }}>
  {
    entries.map((entry) => (
      <li>
        {!entry.children && (
          <summary class="no-children">
            <a
              href={pathWithBase(entry.url || "")}
              class:list={[
                entry.isCurrent ? "current" : "",
                entry.isCurrent && headings && headings.length > 0
                  ? "with-headings"
                  : "",
              ]}
            >
              {entry.title}
            </a>
            {entry.isCurrent && headings && headings.length > 0 && (
              <ul class="headings">
                {headings.map((heading) => (
                  <li class={`heading-${heading.depth}`}>
                    <a href={`#${heading.slug}`}>{heading.text}</a>
                  </li>
                ))}
              </ul>
            )}
          </summary>
        )}
        {entry.children && (
          <details open={hasCurrent(entry)}>
            <summary>
              <a
                href={pathWithBase(entry.url || "")}
                class:list={[entry.isCurrent ? "current" : ""]}
              >
                {entry.title}
              </a>
            </summary>
            <Astro.self
              entries={entry.children}
              nested={true}
              headings={headings}
            />
          </details>
        )}
      </li>
    ))
  }
</ul>

<style lang="scss">
  summary {
    display: grid;
    grid-template-columns: min-content auto;
    grid-template-rows: 1fr;
    list-style: none;

    &::marker,
    &::-webkit-details-marker {
      display: none;
    }

    &::before {
      content: "â–¸";
      display: grid;
      place-items: center;
      left: -1.5em;
      color: var(--clr-text-light);
      transition: transform 0.1s ease-in-out;
      transform-origin: center center;
      cursor: pointer;
    }

    &.no-children {
      ul {
        grid-area: 2 / 2 / 3 / 3;
      }

      &::before {
        color: transparent;
      }
    }

    a {
      flex-grow: 1;
    }
  }

  details {
    &[open] > summary::before {
      transform: rotate(90deg);
    }
  }

  ul {
    list-style: none;
    margin: 0 0 0.5rem;
    padding: 0 0 0 1rem;
    height: 100%;

    &.top-level {
      overflow-y: auto;
    }

    &.headings {
      list-style: none;
      background-color: #eee6;
      padding: 0.5rem 1rem;
      margin-left: 0;
      border-radius: 0 0 0.5em 0.5em;

      li {
        display: list-item;
        line-height: 1.1;
        margin-bottom: 1em;

        &::marker {
          color: var(--clr-text-light);
        }

        &:hover {
          transform: scale(1.01);
        }
      }

      a {
        padding: 0;
      }
    }
  }

  li {
    display: flex;
    flex-direction: column;
  }

  a {
    position: relative;
    text-decoration: none;
    padding: 0.5em 1rem;
    border-radius: 0.5em;
    line-height: 1.1;

    &.current {
      font-weight: bold;
      background: var(--clr-secondary);

      &.with-headings {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
    }

    &:hover {
      transform: scale(1.02);
    }
  }

  @for $i from 1 through 6 {
    .heading-#{$i} {
      margin-left: calc(0.5rem * #{max($i - 2, 0)});
    }
  }
</style>
