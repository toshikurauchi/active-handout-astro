---
import config from "virtual:active-handout/user-config";
import type { InferGetStaticPropsType } from "astro";
import { paths } from "../utils/routing";
import { useTranslations } from "../utils/translations";
import { get404Entry } from "../utils/not-found";
import NotFound from "../components/not-found/NotFound.astro";

import Page from "../layout/Page.astro";
import type { AstroComponentFactory } from "astro/dist/runtime/server";
import type { Handout } from "../schema";

export async function getStaticPaths() {
  return paths;
}

const t = useTranslations(config.lang);

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
let { entry } = Astro.props;
let requireLogin = config.auth && config.defaultRequireLogin;
let title: string = "";
let template: Handout["template"] = "splash";

// This may happen if we are using SSR instead of SSG, so getStaticProps is not called
if (!entry) {
  const entryPath = paths.filter(
    (p) => p.params.slug === Astro.params.slug
  )?.[0];
  if (entryPath) {
    entry = entryPath.props.entry;
    const pageRequireLogin = entry.data.requireLogin;
    if (pageRequireLogin !== undefined) {
      requireLogin = pageRequireLogin;
    }
  } else {
    entry = await get404Entry();
    title = t("404.title");
    Astro.response.status = 404;
  }
}

if (requireLogin) {
  if (!Astro.locals.user) {
    return Astro.redirect("/signin?next=" + Astro.url.pathname);
  }
}

let Content: AstroComponentFactory = NotFound;
let headings = [];
if (entry) {
  const renderedEntry = await entry.render();
  Content = renderedEntry.Content;
  headings = renderedEntry.headings;
  template = entry.data.template;
}
if (!title) {
  title = entry.data.title || headings[0]?.text || "";
}
---

<Page title={title} {template} {headings}>
  <Content />
</Page>
