---
import type { MarkdownHeading } from "astro";
import type { NavTreeItem } from "./nav-tree";

interface Props {
  entries: NavTreeItem[];
  headings?: MarkdownHeading[];
  nested?: boolean;
}

function hasCurrent(entry: NavTreeItem) {
  if (entry.isCurrent) {
    return true;
  }

  if (entry.children) {
    return entry.children.some(hasCurrent);
  }

  return false;
}

const { entries, nested, headings } = Astro.props;
---

<ul class:list={{ "top-level": !nested }}>
  {
    entries.map((entry) => (
      <li>
        {!entry.children && (
          <>
            <a href={entry.url} class:list={[entry.isCurrent ? "current" : ""]}>
              {entry.title}
            </a>
            {entry.isCurrent && headings && headings.length > 0 && (
              <ul class="headings">
                {headings.map((heading) => (
                  <li class={`heading-${heading.depth}`}>
                    <a href={`#${heading.slug}`}>{heading.text}</a>
                  </li>
                ))}
              </ul>
            )}
          </>
        )}
        {entry.children && (
          <details open={hasCurrent(entry)}>
            <summary>
              <a
                href={entry.url}
                class:list={[entry.isCurrent ? "current" : ""]}
              >
                {entry.title}
              </a>
            </summary>
            <Astro.self
              entries={entry.children}
              nested={true}
              headings={headings}
            />
          </details>
        )}
      </li>
    ))
  }
</ul>

<style lang="scss">
  summary {
    position: relative;
    list-style: none;

    &::marker,
    &::-webkit-details-marker {
      display: none;
    }

    &::before {
      content: "â–¸";
      left: -1em;
      color: var(--clr-accent);
      padding: 0 0.5rem;
      position: absolute;
      transition: transform 0.1s ease-in-out;
    }

    a.current {
      border-left: none;
      margin-left: 0;
    }
  }

  details[open] summary::before {
    transform: rotate(90deg);
  }

  ul {
    list-style: none;
    margin: 0 0 0.5rem -0.4rem;
    height: 100%;
    padding: 0 0 0 1rem;
    border-left: 1px solid #3332;

    &.top-level {
      margin-left: 0;
      padding-left: 0;
      border-left: none;
    }

    &.headings {
      list-style: disc;
      background-color: #eee6;
      padding: 0.5rem;
      border-left: none;
      margin-left: 0;

      li {
        display: list-item;

        &::marker {
          color: var(--clr-accent);
        }
      }

      a {
        padding: 0;

        &:hover {
          background: none;
          text-decoration: underline solid var(--clr-accent);
        }
      }
    }
  }

  li {
    display: flex;
    flex-direction: column;
  }

  a {
    position: relative;
    text-decoration: none;
    padding: 0.1em 0.5rem;
    border-radius: 0.2em;

    &.current {
      font-weight: bold;
      background: var(--clr-secondary);
    }

    &:hover {
      background-color: var(--clr-secondary);
    }
  }

  @for $i from 1 through 6 {
    .heading-#{$i} {
      margin-left: calc(1.5rem * #{max($i - 1, 0)});
    }
  }
</style>
